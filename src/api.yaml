# OpenAPI Version
openapi: 3.0.3

###########################
# Document info
###########################
info:
  version: '1.0.0'
  title: AvanChange API
  termsOfService: 'https://avanchange.com/en/pages/terms.html'
  contact:
	name: API Support
	url: 'https://avanchange.com/en/support/'
  x-logo:
	url: 'https://avanchange.com/uploads/images/logo-api.png'
	altText: AvanChange API
  description: |
	Welcome to [AvanChange](https://avanchange.com) Exchange API and developer
	documentation. This page contains the documentation on how to use AvanChange
	through API calls. To get started, create or login into your existing
	[avanchange.com](https://avanchange.com) account. Go to the **My Account**
	&raquo; **API** section to get your **API Key** & **Secret.** 
	
	Last update: 2020-12-23

	# Endpoints & Responses

	The Content-Type for `POST`, `PUT`, `PATCH` requests can be set to `application/json`
	to the request to get the JSON response. Most API endpoints provide the same
	content as their HTML counterparts. Sending requests with the Accept header
	is necessary.

	# Authentication

	Some endpoints do not require any authentication, pretty much anything else
	will require you to be authenticated. To become authenticated you will need
	to create an `X-API-TOKEN` using your API Key and API Secret.


	Once you have your API Token you can pass it as an HTTP header like this:

	```

	curl -X GET "https://api.avanchange.com/v1/endpoint/" \

	-H "X-API-TOKEN: NbtXgMr2bowsXaFQ39XqCA=="

	```

	and this is how POST requests will look:

	```

	curl -X POST "https://api.avanchange.com/v1/endpoint/" \

	-H "Content-Type: application/json;" \

	-H "X-API-TOKEN: NbtXgMr2bowsXaFQ39XqCA=="

	```

	# Create API Token

	To create your API Token you must encode your API Key with API Secret using
	<a href="https://en.wikipedia.org/wiki/Padding_(cryptography)"
	target="_blank">**AES-128-ECB-PKCS5Padding**</a> and encrypting result in
	Base64 encoding.


	Below code used to calculate value for API Token. Also, you can <a
	href="https://github.com/PerfectoWeb/AvanChange-API/tree/main/php/lib"
	target="_blank">download as file</a>.

	```

	// PHP 5 >= 5.3.0, PHP 7, PHP 8

	function encrypt_apikey($api_key, $api_secret) {
	  $alg = 'AES-128-ECB';
	  $ivsize = openssl_cipher_iv_length($alg);
	  $iv = openssl_random_pseudo_bytes($ivsize);
	  $encrypted = openssl_encrypt($api_key, $alg, $api_secret, OPENSSL_RAW_DATA, $iv);
	  $encrypted = base64_encode($encrypted);
	  return $encrypted;
	}

	```
	
	# Rate Limits
	
	To preserve the integrity and reliability of the platform our APIs have the following rate limits.
	
	## All API Endpoints
	
	You can run a max of ten requests per second (10 requests/second) unless otherwise noted below.
	
	## Account APIs
	
	You can run a max of one request per second (1 request/second) on the following:
	
	## Orders APIs
	
	You can run a max of one request per second (1 request/second) and a max of two thousand request per day (2000 requests/day) on the following:
	
	# Errors
	
	The AvanChange API uses HTTP Status codes to reflect a successful or error requests. 2XX status codes represent a successful request, 4XX/5XX status codes represent an error took place. If you receive an error HTTP status code, check the body for an error code and message. 
	
	Also, we send you internal error codes in the message body, which allow you to quickly identify the type of error. There are three different error types: 
	  - **3XXX** - Аuthentication & Security errors
	  - **4XXX** - Data errors
	  - **5XXX** - System errors
	
	## 3xxx errors
	| Code | Description | Advice |
	|-----|-----|-------|
	| 3000 | API is disabled | AvanChange API is globally disabled |
	| 3001 | Access Denied | You are trying to access a secure section without authentication |
	| 3002 | Token is not set | Your X-API-TOKEN is empty |
	| 3003 | Token is not valid | Your X-API-TOKEN is not valid. More info in [Create API Token](#section/Create-API-Token) |
	| 3004 | Your API is disabled | AvanChange API disabled for your Access Token |
	
	## 4xxx errors
	| Code | Description | Advice |
	|-----|-----|-------|
	| 4000 | Request JSON data format is not valid | Field name should not contain left/right spaces. |
	| 4001 | Give currency is missing | Field «give» is missing |
	| 4002 | Give currency code is invalid | Field «give» is not supported. [List of currency codes](#operation/exchange-currencies) |
	| 4003 | Take currency is missing | Field «take» is missing |
	| 4004 | Take currency code is invalid | Field «take» is not supported. [List of currency codes](#operation/exchange-currencies) |
	| 4xxx | ... | ... |
	
	## 5xxx errors
	| Code | Description | Advice |
	|-----|-----|-------|
	| 4000 | Request JSON data format is not valid | Field name should not contain left/right spaces. |
	| 4001 | Give currency is missing | Field «give» is missing |
	| 4002 | Give currency code is invalid | Field «give» is not supported. [List of currency codes](#operation/exchange-currencies) |
	| 4003 | Take currency is missing | Field «take» is missing |
	| 4004 | Take currency code is invalid | Field «take» is not supported. [List of currency codes](#operation/exchange-currencies) |
	| 4xxx | ... | ... |


###########################
# Groups for navigation
###########################
x-tagGroups:
  - name: Methods
	tags:
	  - Account
	  - Exchange
	  - Orders
	  
###########################
# Components
###########################
components:

  # headers
  headers:
	X-RateLimit-Limit:
	  description: Request limit per hour
	  schema:
		type: integer
	  example: 100
	X-RateLimit-Remaining:
	  description: Remaining requests for the hour
	  schema:
		type: integer
	  example: 100
	  
  # security
  securitySchemes:
	X-API-TOKEN:
	  type: apiKey
	  in: header
	  name: X-API-TOKEN
	  
  parameters:
	api_token_header:
	  name: X-API-TOKEN
	  in: header
	  required: true
	  schema:
		type: string
	  example: "NbtXgMr2bowsXaFQ39XqCA=="
	  
  # schemas
  schemas:
  
	user:
	  type: object
	  properties:
		login:
		  description: User supplied username
		  type: string
		  minLength: 3
		  example: John47
		  pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'
		email:
		  description: User email address
		  type: string
		  format: email
		  minLength: 7
		  example: john.doe@example.com
		points:
		  description: Referral Programm points
		  type: integer
		  minLength: 1
		  example: 3570
		level:
		  description: Referral Programm level
		  type: integer
		  minLength: 1
		  example: 3
		registered:
		  description: User registration epoch time
		  type: integer
		  minLength: 10
		  example: 1552124074
		last_visit:
		  description: User last visit epoch time
		  type: integer
		  minLength: 10
		  example: 1558205323
		api_status:
		  description: |
			User API status
			  * `0` - Disabled
			  * `1` - Enabled
		  type: integer
		  example: 1
		  enum:
			- 0
			- 1
		status:
		  description: |
			User account status
			  * `0` - Inactive
			  * `1` - Active
			  * `2` - Blocked
		  type: integer
		  enum:
			- 0
			- 1
			- 2
		  example: 1
		  
	balance:
	  type: object
	  properties:
		acbtc:
		  description: User Balance in BTC
		  type: number
		  format: float
		  multipleOf: 0.000001
		  minLength: 1
		  example: 0.285601
		aceth:
		  description: User Balance in ETH
		  type: number
		  format: float
		  multipleOf: 0.000001
		  minLength: 1
		  example: 0.285601
		acbtc_max:
		  description: The max allowed deposit on BTC balance
		  type: number
		  format: float
		  multipleOf: 0.000001
		  minLength: 1
		  example: 2
		aceth_max:
		  description: The max allowed deposit on ETH balance
		  type: number
		  format: float
		  multipleOf: 0.000001
		  minLength: 1
		  example: 50
		  
	currencies:
	  type: object
	  properties:
		BTC:
		  description: Human friendly name for BTC
		  type: string
		  minLength: 3
		  example: Bitcoin
		ETH:
		  description: Human friendly name for ETH
		  type: string
		  minLength: 3
		  example: Ethereum
		XMR:
		  description: Human friendly name for XMR
		  type: string
		  minLength: 3
		  example: Monero (XMR)
		TUSD:
		  description: Human friendly name for TUSD
		  type: string
		  minLength: 3
		  example: TrueUSD (TUSD)
		QWRUB:
		  description: Human friendly name for QWRUB
		  type: string
		  minLength: 3
		  example: Qiwi (RUB)
		...:
		  description: Human friendly name for other currencies
		  type: string
		  minLength: 3
		  example: ...
		  
	rate:
	  type: object
	  properties:
		give:
		  description: >-
			Code of the currency with which you pay. All currency codes you can get through
			[/exchange/currencies/](#operation/exchange-currencies) method
		  type: string
		  minLength: 3
		  example: BTC
		give_name:
		  description: Human friendly name of the direction from which you are exchanging.
		  type: string
		  minLength: 3
		  example: Bitcoin
		take:
		  description: >-
			Code of the currency you want to exchange for. All currency codes you can get through
			[/exchange/currencies/](#operation/exchange-currencies) method.
		  type: string
		  minLength: 3
		  example: ETH
		take_name:
		  description: Human friendly name of the destination you are exchanging for.
		  type: string
		  minLength: 3
		  example: Ethereum
		rate:
		  description: >-
			Exchange rate without discounts. If you want get rate with all
			personal discounts please use `X-API-TOKEN` header in your query.
		  type: number
		  format: float
		  minLength: 3
		  multipleOf: 0.000001
		  example: 1709159.47
		reserve:
		  description: Exchange currency reserve
		  type: number
		  format: float
		  minLength: 3
		  multipleOf: 0.000001
		  example: 500000
		min:
		  description: Min amount in give currency
		  type: number
		  format: float
		  minLength: 3
		  multipleOf: 0.000001
		  example: 5000
		max:
		  description: Max amount in give currency
		  type: number
		  format: float
		  minLength: 3
		  multipleOf: 0.000001
		  example: 45000
		  
	rates:
	  type: object
	  properties:
		'1':
		  $ref: '#/components/schemas/rate'
		'2':
		  $ref: '#/components/schemas/rate'
		'n':
		  description: Same other exchange rates
		  type: object
		  example: ...
		  
		  
	order-created:
	  type: object
	  properties:
		hash:
		  description: Unique payment hash. Be sure to save the hash! With hash you can confirm, cancel or check your payment status.
		  type: string
		  minLength: 32
		  example: 'd88b1e8f0e32b9a8bfe1e698b074dab62397b8f9'
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		give:
		  description: The currency in which you pay. All currency codes you can get through
			[/exchange/currencies/](#operation/exchange-currencies) method
		  type: string
		  minLength: 3
		  example: 'BTC'
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		give_name:
		  description: Human friendly name of giving currency.
		  type: string
		  minLength: 3
		  example: 'Bitcoin (BTC)'
		give_purse:
		  description: The purse from which you will pay.
		  type: string
		  minLength: 3
		  example: '14xj5N13HXr8XZ6QSP6zoscs5ra1Eb3r8c'
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		give_amount:
		  description: The amount you must pay.
		  type: number
		  format: float
		  minLength: 1
		  multipleOf: 0.000001
		  example: 0.050000
		give_balance:
		  description: Payment from balance. Zero when payment is not from balance.
		  type: number
		  format: float
		  minLength: 1
		  multipleOf: 0.000001
		  example: 0
		take:
		  description: The currency of the recipient. All currency codes you can get through
			[/exchange/currencies/](#operation/exchange-currencies) method
		  type: string
		  minLength: 3
		  example: 'QWRUB'
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		take_name:
		  description: Human friendly name of the currency in which you will receive the payment.
		  type: string
		  minLength: 3
		  example: 'QIWI (RUB)'
		take_purse:
		  description: Purse where you want to receive payment by exchange.
		  type: string
		  minLength: 3
		  example: '79001234567'
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		take_amount:
		  description: The amount you will receive.
		  type: number
		  format: float
		  minLength: 1
		  multipleOf: 0.000001
		  example: 13601.530000
		take_balance:
		  description: Balance top-up. Zero when payment is not the balance top-up.
		  type: number
		  format: float
		  minLength: 1
		  multipleOf: 0.000001
		  example: 0
		customer_name:
		  description: The name of the payee.
		  type: string
		  minLength: 3
		  example: 'John Wick'
		customer_email:
		  description: E-mail of the payee for status update notifications.
		  type: string
		  minLength: 3
		  example: 'john.wick@example.com'
		customer_contact:
		  description: Telegram or VK Account of payee.
		  type: string
		  minLength: 3
		  example: 'https://vk.com/john.wick'
		date_create:
		  description: The date-time of order creation in our system. <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank">RFC 3339, section 5.6</a>.
		  type: string
		  format: date-time
		  example: '2021-01-11T15:27:45Z'
		date_life:
		  description: |
			Life time of the order in <a href="https://tools.ietf.org/html/rfc3339#section-5.6" target="_blank">RFC 3339, section 5.6</a>. You must pay for the order before this time.
		  type: string
		  format: date-time
		  example: '2021-01-11T15:27:45Z'
		status:
		  description: |
			Exchange order status
			  * `CREATED` - Order created. Awaiting payment to change status to *PAID*.
			  * `PAID` - Our system receive payment information form processing.
			  * `PAID_MANUALLY` - When payment sent manually (without processing)
			  * `COMPLETE` - Order succesfull complete.
			  * `DENIED` - Exchange for this order is denied by moderator
			  * `CANCELED` - Order canceled by user
			  * `EXPIRED` - Order lifetime is expired
			  * `REMOVED` - Order is removed by moderator
		  type: string
		  enum:
			- 'CREATED'
			- 'PAID'
			- 'COMPLETE'
			- 'DENIED'
			- 'CANCELED'
			- 'EXPIRED'
			- 'REMOVED'
		  example: 'CREATED'
		  minLength: 3
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		  
		  
	order-canceled:
	  type: object
	  properties:
		hash:
		  description: Unique payment hash. Save this hash after request to confirm, cancel or check your payment status.
		  type: string
		  minLength: 32
		  example: 'd88b1e8f0e32b9a8bfe1e698b074dab62397b8f9'
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		status:
		  description: |
			Exchange order status
			  * `CREATED` - Order created. Awaiting payment to change status to *PAID*.
			  * `PAID` - Our system receive payment information form processing.
			  * `PAID_MANUALLY` - When payment sent manually (without processing)
			  * `COMPLETE` - Order succesfull complete.
			  * `DENIED` - Exchange for this order is denied by moderator
			  * `CANCELED` - Order canceled by user
			  * `EXPIRED` - Order lifetime is expired
			  * `REMOVED` - Order is removed by moderator
		  type: string
		  enum:
			- 'CREATED'
			- 'PAID'
			- 'COMPLETE'
			- 'DENIED'
			- 'CANCELED'
			- 'EXPIRED'
			- 'REMOVED'
		  example: 'CANCELED'
		  minLength: 3
		  pattern: '/(?=.*[a-zA-Z0-9])/'
		  
		  
	error-access:
	  type: object
	  properties:
		error:
		  description: |
		   When you'r get an array "error = 1" in any request, it means that the server returned an error.
			  * `0` - Success
			  * `1` - Error
		  type: integer
		  enum:
			- 0
			- 1
		  example: 1
		code:
		  description: >-
			There are three different error types.
			  - 3XXX - Аuthentication & security errors
			  - 4XXX - Data errors
			  - 5XXX - System errors
		  type: integer
		  minLength: 4
		  example: 3001
		description:
		  description: >-
		   Human friendly description of error
		  type: string
		  minLength: 3
		  example: API Token not set
		advice:
		  description: >-
		   Possible solution to your problem
		  type: string
		  minLength: 3
		  example: Submit your encrypted API Key through X-API-TOKEN header 
		  
		  
	error-data:
	  type: object
	  properties:
		error:
		  description: |
		   When you'r get an array "error = 1" in any request, it means that the server returned an error.
			  * `0` - Success
			  * `1` - Error
		  type: integer
		  enum:
			- 0
			- 1
		  example: 1
		code:
		  description: >-
			There are three different error types.
			  - 3XXX - Аuthentication & security errors
			  - 4XXX - Data errors
			  - 5XXX - System errors
		  type: integer
		  minLength: 4
		  example: 4001
		description:
		  description: >-
		   Human friendly description of error
		  type: string
		  minLength: 3
		  example: Encrypted data format is invalid
		advice:
		  description: >-
		   Possible solution to your problem
		  type: string
		  minLength: 3
		  example: Please check specified algorithm used for encryption
		  
	error-codes:
	  type: object
	  properties:
		3000:
		  description: Secret key does not exist
		  type: string
		3001:
		  description: Merchant account does not exist
		  type: string
		3002:
		  description: Encrypted data format is invalid
		  type: string
		  
	   
###########################
# Servers
###########################   
servers:
  - url: 'https://api.avanchange.com/v1'
  - url: 'https://avanchange.com/api/v1'
  
  
paths:
###########################
# Path: Exchange
###########################
  /exchange/currencies:
	summary: Currencies
	description: Get all payment methods codes with human friendly names
	get:
	  summary: Currency codes
	  description: Get all available currency codes with human friendly names
	  operationId: exchange-currencies
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/currencies'
	  tags:
		- Exchange
		
  /exchange/rates:
	summary: Rates
	description: Actions with exchange rates and etc
	get:
	  summary: Rates
	  description: Get all exchange directions rates
	  operationId: exchange-rates
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/rates'
	  tags:
		- Exchange
		
  '/exchange/rate/{symbol}':
	summary: Rate
	description: Get rate for selected direction
	get:
	  summary: Single Rate
	  description: Get rate for selected direction
	  operationId: exchange-rate
	  parameters:
		- name: symbol
		  in: path
		  required: true
		  example: BTC-ETH
		  description: >-
			Exchange direction with currency codes, separated by a dash. Get a
			list of active currency codes through
			[/exchange/currencies/](#operation/exchange-currencies) method.
		  schema:
			type: string
			pattern: '^[A-Z]{3,8}-[A-Z]{3,8}$'
			minLength: 7
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/rate'
	  tags:
		- Exchange
		
###########################
# Path: Account
###########################
  /account/info:
	summary: Account info
	description: Get account info
	get:
	  security:
		- X-API-TOKEN: []
	  summary: Get account info
	  description: Retrieve a short data of personal account.
	  operationId: account-info
	  parameters:
		- $ref: '#/components/parameters/api_token_header'
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/user'
	  tags:
		- Account
		
  /account/balance:
	summary: Account balance
	description: Get account balances
	get:
	  security:
		- X-API-TOKEN: []
	  summary: Get account balance
	  description: Retrieve personal account balances
	  operationId: account-balance
	  parameters:
		- $ref: '#/components/parameters/api_token_header'
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/balance'
	  tags:
		- Account
		
###########################
# Path: Orders
###########################
  /order/create:
	summary: Create order
	description: Creates exchange order with selected direction and registers payment information.
	post:
	  security:
		- X-API-TOKEN: []
	  summary: Create exchange order
	  description: |
		Create an exchange order object with the following rules:
		
		  * The total length of the customer name cannot exceed 64 characters.
		  * The customer_contact can contain only VK URL or Telegram username with @ symbol at start.
		  * The customer name cannot consist of all capital letters..
		  * You can create **«Bank Card to XXX»** exchange only for approved Bank Cards.
		  * You can create maximum 100 exchange orders hourly.
		  * By creating exchange order you accept our <a href="https://avanchange.com/en/pages/terms.html" target="_blank">Terms of Use</a> automatically.
	  operationId: order-create
	  parameters:
		- $ref: '#/components/parameters/api_token_header'
	  requestBody:
		required: true
		content:
			application/json:
			  schema:
				type: object
				properties:
				  give:
					description: Give currency code. All currency codes you can get through
					  [/exchange/currencies/](#operation/exchange-currencies) method
					type: string
					minLength: 3
					example: 'BTC'
					pattern: '/(?=.*[a-zA-Z0-9])/'
				  give_amount:
					description: The amount you must pay. Specify take_amount or give_amount.
					type: number
					format: float
					minLength: 1
					multipleOf: 0.000001
					example: 0.1
				  give_purse:
					description: The purse from which you will pay.
					type: string
					minLength: 3
					example: null
					pattern: '/(?=.*[a-zA-Z0-9])/'
				  take:
					description: Take currency code. All currency codes you can get through
					  [/exchange/currencies/](#operation/exchange-currencies) method
					type: string
					minLength: 3
					example: 'QWRUB'
					pattern: '/(?=.*[a-zA-Z0-9])/'
				  take_amount:
					description: The amount you will receive. When you are specify. If you specify both amounts, the recipient's amount will be ignored and recalculated in our system.
					type: number
					format: float
					minLength: 1
					multipleOf: 0.000001
					example: null
				  take_purse:
					description: Purse where you want to receive payment by exchange.
					type: string
					minLength: 3
					example: '79001234567'
					pattern: '/(?=.*[a-zA-Z0-9])/'
				  customer_name:
					description: The name of the payee.
					type: string
					minLength: 3
					example: 'John Wick'
				  customer_email:
					description: E-mail of the payee for status update notifications.
					type: string
					minLength: 3
					example: 'john.wick@example.com'
				  customer_contact:
					description: Telegram or VK Account of payee.
					type: string
					minLength: 3
					example: 'https://vk.com/john.wick'
				required:
				  - give
				  - give_amount
				  - take
				  - take_purse
				  - customer_email
				  - customer_contact
				
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/order-created'
		'400':
		  description: Data error
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-data'
		'401':
		  description: Access denied
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-access'
	  tags:
		- Orders
		
		
  /order/check/{hash}:
	summary: Check order
	description: Cancel the created and not paid order.
	get:
	  security:
		- X-API-TOKEN: []
	  summary: Check order
	  description: Check the order status and get information about order with unique `hash`
	  operationId: order-check
	  parameters:
		- $ref: '#/components/parameters/api_token_header'
		- name: hash
		  in: path
		  required: true
		  example: 'd88b1e8f0e32b9a8bfe1e698b074dab62397b8f9'
		  description: Unique order hash
		  schema:
			type: string
			minLength: 32
			example: 'd88b1e8f0e32b9a8bfe1e698b074dab62397b8f9'
			pattern: '/(?=.*[a-zA-Z0-9])/'
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/order-created'
		'400':
		  description: Data error
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-data'
		'401':
		  description: Access denied
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-access'
	  tags:
		- Orders
		
		
  /order/confirm:
	summary: Confirm order
	description: If the order was created with the exchange of personal balance, then it must be confirmed.
	patch:
	  security:
		- X-API-TOKEN: []
	  summary: Confirm exchange order
	  description: If the order was created with the exchange of personal balance, then it must be confirmed.
	  operationId: order-confirm
	  parameters:
		- $ref: '#/components/parameters/api_token_header'
	  requestBody:
		required: true
		content:
			application/json:
			  schema:
				type: object
				properties:
				  hash:
					description: The payment unique hash, which you received when creating the application.
					type: string
					minLength: 32
					example: 'd88b1e8f0e32b9a8bfe1e698b074dab62397b8f9'
					pattern: '/(?=.*[a-zA-Z0-9])/'
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/order-canceled'
		'400':
		  description: Data error
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-data'
		'401':
		  description: Access denied
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-access'
	  tags:
		- Orders
		
		
  /order/cancel:
	summary: Cancel order
	description: Order cancellation if it has not been paid.
	patch:
	  security:
		- X-API-TOKEN: []
	  summary: Cancel exchange order
	  description: Order cancellation if it has not been paid.
	  operationId: order-cancel
	  parameters:
		- $ref: '#/components/parameters/api_token_header'
	  requestBody:
		required: true
		content:
			application/json:
			  schema:
				type: object
				properties:
				  hash:
					description: The payment unique hash, which you received when creating the application.
					type: string
					minLength: 32
					example: 'd88b1e8f0e32b9a8bfe1e698b074dab62397b8f9'
					pattern: '/(?=.*[a-zA-Z0-9])/'
	  responses:
		'200':
		  description: Success
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/order-canceled'
		'400':
		  description: Data error
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-data'
		'401':
		  description: Access denied
		  content:
			application/json:
			  schema:
				$ref: '#/components/schemas/error-access'
	  tags:
		- Orders
		
###########################
# Tags
###########################
tags:
  - name: Account
	description: 'Operations with personal account. Get user info, balance and others.'
  - name: Exchange
	description: >-
	  Operations with rates and sugessions. Get currencies, rates or single
	  rate.
  - name: Orders
	description: 'Operations with orders. Create, confirm, cancel and check orders.'
